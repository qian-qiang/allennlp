[pytest]
testpaths = tests/ scripts/tests/
python_classes = Test* *Test
log_format = %(asctime)s - %(levelname)s - %(name)s - %(message)s
log_level = DEBUG
markers =
    java
    gpu: marks tests that need at least one GPU
filterwarnings =
# 注意：当一个警告与列表中多个选项匹配时，将执行最后一个匹配选项的操作。
#
# 单个警告过滤器以冒号分隔的字段序列形式指定：
# action:message:category:module:line
# <参考: https://docs.python.org/3/library/warnings.html#warning-filter>
#
# 如何显式测试警告：
#  使用 `unittest`: https://docs.python.org/3/library/warnings.html#testing-warnings
#  使用 `pytest`: https://docs.pytest.org/en/4.1.0/warnings.html#assertwarnings
#
# 我们的策略是忽略（静默）来自 allennlp 之外的所有过时警告，但将所有 _内部_ 过时警告视为错误。
# 如果我们从另一个库中调用的内容产生过时警告，我们将仅依靠在测试之外看到这些警告。在这里将这些错误放置的目的是确保我们在 allennlp 中不轻易过时。
    
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::DeprecationWarning:allennlp.*:
    error::PendingDeprecationWarning:allennlp.*:
# 对于这些特定的警告，我们不希望因此产生错误，但我们也不希望看到大量相同的警告。
    once:This particular transformer implementation is a provisional feature.*::allennlp\.modules\.seq2seq_encoders\.bidirectional_language_model_transformer
	ignore:Length of IterableDataset.*:UserWarning:torch\.utils\.data\.dataloader
	ignore::UserWarning:allennlp.*:
